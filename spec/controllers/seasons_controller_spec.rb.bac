require File.expand_path(File.dirname(__FILE__) + '/../spec_helper')
include AuthenticatedSystem
describe SeasonsController do

  def mock_season(stubs={})
    @mock_season ||= mock_model(Season, stubs)
  end 
  
  before do    
    @admin = mock_user
    @admin.stub!(:has_role?).with("admin").and_return(true)    
    
  end
  
  describe "responding to GET index" do
	def do_get
	  get :index
	end
	
    it "should expose all seasons as @seasons" do
      Season.should_receive(:find).with(:all).and_return([mock_season])
      do_get
      assigns[:seasons].should == [mock_season]
    end

    describe "with mime type of xml" do
  
      it "should render all seasons as xml" do
        request.env["HTTP_ACCEPT"] = "application/xml"
        Season.should_receive(:find).with(:all).and_return(seasons = mock("Array of Seasons"))
        seasons.should_receive(:to_xml).and_return("generated XML")
        do_get
        response.body.should == "generated XML"
      end
    
    end

  end

  describe "responding to GET show" do  	
	def do_get
	  get :show, :id => "37"
	end
	
    it "should expose the requested season as @season" do
      Season.should_receive(:find).with("37").and_return(mock_season)
      do_get
      assigns[:season].should equal(mock_season)
    end
    
    describe "with mime type of xml" do

      it "should render the requested season as xml" do
        request.env["HTTP_ACCEPT"] = "application/xml"
        Season.should_receive(:find).with("37").and_return(mock_season)
        mock_season.should_receive(:to_xml).and_return("generated XML")
        do_get
        response.body.should == "generated XML"
      end

    end
    
  end

  describe "responding to GET new" do
  before do    
    @admin = mock_user
    @admin.stub!(:has_role?).and_return(true)    
  end
    it "should expose a new season as @season" do      
      login_as @admin
      Season.should_receive(:new).and_return(mock_season)
      get :new
      current_user.should_not be_nil
      @admin.has_role?("admin").should be_true
      assigns[:season].should equal(mock_season)
    end   
   
  end

  describe "responding to POST create" do
  	before(:each) do
  	  login_as @admin
  	  current_user.stub!(:has_role?).and_return(true)
  	  @params = { "name" => "First", "round_count" => 5, "question_count" => 5}
  	  @season = mock_model(Season, { :name => "First", :round_count => 5, :question_count => 5, :save => true})
  	end
  	
  	def do_post
      post :create, :season => @params
  	end

    describe "with valid params" do
      
      it "should expose a newly created season as @season" do      	
        Season.should_receive(:new).with(@params).and_return(@season)
        do_post
        assigns(:season).should equal(@season)
      end

      it "should redirect to the created season" do
        Season.stub!(:new).and_return(@season)
        do_post
        response.should redirect_to(season_url(@season))
      end
      
    end
    
    describe "with invalid params" do

      it "should expose a newly created but unsaved season as @season" do
        Season.stub!(:new).with({'these' => 'params'}).and_return(mock_season(:save => false))
        post :create, :season => {:these => 'params'}
        assigns(:season).should equal(mock_season)
      end

      it "should re-render the 'new' template" do
        Season.stub!(:new).and_return(mock_season(:save => false))
        post :create, :season => {}
        response.should render_template('new')
      end
      
    end
  end
 
  describe "responding to DELETE destroy" do

    it "should destroy the requested season" do
      Season.should_receive(:find).with("37").and_return(mock_season)
      mock_season.should_receive(:destroy)
      delete :destroy, :id => "37"
    end
  
    it "should redirect to the seasons list" do
      Season.stub!(:find).and_return(mock_season(:destroy => true))
      delete :destroy, :id => "1"
      response.should redirect_to(seasons_url)
    end

  end

end
